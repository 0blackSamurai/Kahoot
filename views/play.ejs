<%- include('./partials/header') %>
<link rel="stylesheet" href="/css/kahoot-dark.css">

<div class="game-container">
    <div class="game-header">
        <h1><%= quiz.title %></h1>
        <div class="game-info">
            <span class="question-counter">Question <span id="currentQuestion">1</span>/<span id="totalQuestions"><%= quiz.questions.length %></span></span>
            <span class="game-score">Score: <span id="score">0</span></span>
        </div>
        <div class="timer-container">
            <div class="timer-bar" id="timerBar"></div>
            <div class="timer-text" id="timerText">30</div>
        </div>
    </div>
    
    <div class="question-display">
        <div id="questionText" class="question-text"></div>
        
        <!-- Multiple Choice Options (default) -->
        <div id="optionsGrid" class="options-grid question-type-container"></div>
        
        <!-- Text Answer Question -->
        <div id="textAnswerContainer" class="text-answer question-type-container" style="display:none">
            <div class="text-answer-box">
                <input type="text" id="textAnswerInput" class="text-answer-input" placeholder="Type your answer here...">
                <button id="submitTextAnswer" class="btn-submit-answer">Submit</button>
            </div>
        </div>
        
        <!-- Ordering Question -->
        <div id="orderingContainer" class="ordering-container question-type-container" style="display:none">
            <div id="orderingItems" class="ordering-items-list"></div>
            <div class="ordering-controls">
                <button id="submitOrdering" class="btn-submit-answer">Submit Order</button>
            </div>
        </div>
        
        <!-- True/False Question -->
        <div id="trueFalseContainer" class="true-false-container question-type-container" style="display:none">
            <div class="true-false-options">
                <button id="trueButton" class="true-button">TRUE</button>
                <button id="falseButton" class="false-button">FALSE</button>
            </div>
        </div>
    </div>
    
    <div class="game-controls">
        <button id="nextBtn" class="btn-next" style="display: none;">Next Question</button>
        <button id="finishBtn" class="btn-finish" style="display: none;">See Results</button>
    </div>
    
    <!-- Results Modal -->
    <div id="resultsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Quiz Results</h2>
            </div>
            <div class="modal-body">
                <div class="result-stats">
                    <div class="result-score">
                        <div class="score-value" id="finalScore">0</div>
                        <div class="score-label">points</div>
                    </div>
                    <div class="result-accuracy">
                        <div class="accuracy-chart">
                            <div id="accuracyFill" class="accuracy-fill"></div>
                            <span id="accuracyText" class="accuracy-text">0%</span>
                        </div>
                        <div class="accuracy-label">Accuracy</div>
                    </div>
                </div>
                <div class="result-breakdown">
                    <div class="correct-answers">
                        <div class="result-number" id="correctCount">0</div>
                        <div class="result-label">Correct</div>
                    </div>
                    <div class="incorrect-answers">
                        <div class="result-number" id="incorrectCount">0</div>
                        <div class="result-label">Incorrect</div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="playAgainBtn" class="btn-play-again">Play Again</button>
                <a href="/profile" class="btn-back-profile">Back to Profile</a>
            </div>
        </div>
    </div>
    
    <!-- Question Data (hidden) -->
    <div id="quizData" style="display: none;" data-quiz="<%= JSON.stringify(quiz) %>"></div>
</div>

<style>
    .game-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
        height: calc(100vh - 100px);
        display: flex;
        flex-direction: column;
    }
    
    .game-header {
        background-color: rgba(45, 45, 45, 0.85);
        border-radius: 12px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .game-header h1 {
        font-size: 1.8rem;
        margin: 0 0 10px 0;
        color: white;
        text-align: center;
    }
    
    .game-info {
        display: flex;
        justify-content: space-between;
        margin: 10px 0;
        font-size: 1.1rem;
        color: #ddd;
    }
    
    .timer-container {
        width: 100%;
        height: 12px;
        background-color: #444;
        border-radius: 6px;
        margin-top: 10px;
        position: relative;
    }
    
    .timer-bar {
        height: 100%;
        width: 100%;
        background: linear-gradient(90deg, var(--kahoot-purple) 0%, var(--kahoot-blue) 100%);
        border-radius: 6px;
        transition: width 1s linear;
    }
    
    .timer-text {
        position: absolute;
        right: 10px;
        top: -25px;
        color: #fff;
        font-weight: bold;
    }
    
    .question-display {
        flex: 1;
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }
    
    .question-text {
        background-color: var(--dark-card-bg);
        padding: 25px;
        border-radius: 12px;
        font-size: 1.5rem;
        color: white;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .options-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        flex: 1;
    }
    
    .option-button {
        border: none;
        border-radius: 12px;
        padding: 25px 15px;
        font-size: 1.2rem;
        color: white;
        font-weight: bold;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        display: flex;
        align-items: center;
        transition: transform 0.2s, box-shadow 0.2s;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .option-button:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    }
    
    .option-button:active {
        transform: translateY(0);
    }
    
    .option-button.red { background-color: var(--kahoot-red); }
    .option-button.blue { background-color: var(--kahoot-blue); }
    .option-button.yellow { background-color: var(--kahoot-yellow); }
    .option-button.green { background-color: var(--kahoot-green); }
    
    .option-symbol {
        font-size: 24px;
        margin-right: 15px;
        background: white;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 5px;
        color: #333;
    }
    
    .option-button .option-text {
        flex: 1;
        text-align: left;
    }
    
    .option-button.selected {
        border: 4px solid white;
        box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.5);
    }
    
    .option-button.correct {
        background-color: var(--kahoot-green) !important;
    }
    
    .option-button.incorrect {
        background-color: var(--kahoot-red) !important;
        opacity: 0.7;
    }
    
    .game-controls {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }
    
    .btn-next, .btn-finish {
        background-color: var(--kahoot-purple);
        color: white;
        border: none;
        padding: 15px 30px;
        font-size: 1.2rem;
        font-weight: bold;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .btn-next:hover, .btn-finish:hover {
        background-color: var(--kahoot-light-purple);
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(142, 82, 245, 0.3);
    }
    
    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 1000;
        align-items: center;
        justify-content: center;
    }
    
    .modal-content {
        background-color: var(--dark-secondary-bg);
        border-radius: 12px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        animation: modalFadeIn 0.3s;
    }
    
    @keyframes modalFadeIn {
        from { opacity: 0; transform: translateY(-50px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .modal-header {
        background-color: var(--kahoot-purple);
        padding: 15px;
        border-radius: 12px 12px 0 0;
        text-align: center;
    }
    
    .modal-header h2 {
        color: white;
        margin: 0;
    }
    
    .modal-body {
        padding: 20px;
    }
    
    .result-stats {
        display: flex;
        justify-content: space-around;
        margin-bottom: 30px;
    }
    
    .result-score {
        text-align: center;
    }
    
    .score-value {
        font-size: 3rem;
        font-weight: bold;
        color: var(--kahoot-light-purple);
    }
    
    .score-label {
        color: var(--dark-text-secondary);
    }
    
    .result-accuracy {
        text-align: center;
    }
    
    .accuracy-chart {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background-color: #444;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
    }
    
    .accuracy-fill {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: conic-gradient(var(--kahoot-green) 0%, var(--kahoot-green) 0%, transparent 0%, transparent 100%);
        position: absolute;
        top: 0;
        left: 0;
        transition: background 0.5s;
    }
    
    .accuracy-text {
        color: white;
        font-weight: bold;
        font-size: 1.3rem;
        position: relative;
        z-index: 2;
    }
    
    .accuracy-label {
        color: var(--dark-text-secondary);
        margin-top: 5px;
    }
    
    .result-breakdown {
        display: flex;
        justify-content: center;
        gap: 40px;
        text-align: center;
    }
    
    .result-number {
        font-size: 2rem;
        font-weight: bold;
    }
    
    .correct-answers .result-number {
        color: var(--kahoot-green);
    }
    
    .incorrect-answers .result-number {
        color: var(--kahoot-red);
    }
    
    .result-label {
        color: var(--dark-text-secondary);
    }
    
    .modal-footer {
        display: flex;
        justify-content: center;
        padding: 20px;
        gap: 15px;
    }
    
    .btn-play-again, .btn-back-profile {
        padding: 12px 20px;
        border-radius: 8px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s;
        text-align: center;
        text-decoration: none;
    }
    
    .btn-play-again {
        background-color: var(--kahoot-green);
        color: white;
        border: none;
    }
    
    .btn-back-profile {
        background-color: var(--dark-input-bg);
        color: white;
        border: none;
    }
    
    .btn-play-again:hover, .btn-back-profile:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    /* Text Answer styles */
    .text-answer {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        width: 100%;
        margin-top: 20px;
    }
    
    .text-answer-box {
        width: 100%;
        max-width: 600px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    
    .text-answer-input {
        padding: 15px;
        font-size: 1.5rem;
        border: 3px solid var(--kahoot-light-purple);
        background-color: white;
        border-radius: 10px;
        text-align: center;
        color: #333;
    }
    
    .btn-submit-answer {
        background-color: var(--kahoot-green);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 15px;
        font-size: 1.2rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .btn-submit-answer:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
    
    /* Ordering styles */
    .ordering-container {
        width: 100%;
        margin-top: 20px;
    }
    
    .ordering-items-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 20px;
    }
    
    .ordering-item {
        display: flex;
        align-items: center;
        background-color: var(--dark-card-bg);
        padding: 15px;
        border-radius: 10px;
        cursor: grab;
        transition: transform 0.2s, background-color 0.2s;
    }
    
    .ordering-item:hover {
        background-color: var(--dark-hover);
    }
    
    .ordering-item.dragging {
        opacity: 0.8;
        background-color: var(--kahoot-light-purple);
        transform: scale(1.02);
    }
    
    .ordering-handle {
        margin-right: 10px;
        color: var(--kahoot-light-purple);
    }
    
    .ordering-text {
        flex-grow: 1;
        font-size: 1.1rem;
    }
    
    .ordering-controls {
        margin-top: 20px;
        text-align: center;
    }
    
    /* True/False styles */
    .true-false-container {
        width: 100%;
        margin-top: 20px;
    }
    
    .true-false-options {
        display: flex;
        justify-content: center;
        gap: 30px;
    }
    
    .true-button, .false-button {
        padding: 30px;
        width: 200px;
        font-size: 2rem;
        font-weight: bold;
        border: none;
        border-radius: 15px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .true-button {
        background-color: var(--kahoot-green);
        color: white;
    }
    
    .false-button {
        background-color: var(--kahoot-red);
        color: white;
    }
    
    .true-button:hover, .false-button:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
    }
    
    .true-button.selected, .false-button.selected {
        border: 4px solid white;
        box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.5);
    }
    
    /* Make sure all question type containers share styling */
    .question-type-container {
        flex: 1;
    }

    /* Responsive styles for new question types */
    @media (max-width: 768px) {
        .true-false-options {
            flex-direction: column;
            gap: 15px;
        }
        
        .true-button, .false-button {
            width: 100%;
            padding: 20px;
        }
        
        .text-answer-input {
            font-size: 1.2rem;
            padding: 12px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get quiz data
        const quizData = JSON.parse(document.getElementById('quizData').dataset.quiz);
        const questions = quizData.questions;
        
        // Game elements
        const questionTextEl = document.getElementById('questionText');
        const optionsGridEl = document.getElementById('optionsGrid');
        const textAnswerContainerEl = document.getElementById('textAnswerContainer');
        const textAnswerInputEl = document.getElementById('textAnswerInput');
        const submitTextAnswerBtn = document.getElementById('submitTextAnswer');
        const orderingContainerEl = document.getElementById('orderingContainer');
        const orderingItemsEl = document.getElementById('orderingItems');
        const submitOrderingBtn = document.getElementById('submitOrdering');
        const trueFalseContainerEl = document.getElementById('trueFalseContainer');
        const trueButtonEl = document.getElementById('trueButton');
        const falseButtonEl = document.getElementById('falseButton');
        const currentQuestionEl = document.getElementById('currentQuestion');
        const totalQuestionsEl = document.getElementById('totalQuestions');
        const scoreEl = document.getElementById('score');
        const timerBarEl = document.getElementById('timerBar');
        const timerTextEl = document.getElementById('timerText');
        const nextBtn = document.getElementById('nextBtn');
        const finishBtn = document.getElementById('finishBtn');
        const resultsModal = document.getElementById('resultsModal');
        
        // Result elements
        const finalScoreEl = document.getElementById('finalScore');
        const accuracyFillEl = document.getElementById('accuracyFill');
        const accuracyTextEl = document.getElementById('accuracyText');
        const correctCountEl = document.getElementById('correctCount');
        const incorrectCountEl = document.getElementById('incorrectCount');
        const playAgainBtn = document.getElementById('playAgainBtn');
        
        // Game state
        let currentQuestionIndex = 0;
        let score = 0;
        let timer = null;
        let timeLeft = 0;
        let answered = false;
        const userAnswers = [];
        const optionSymbols = ['▲', '◆', '●', '■'];
        let orderingItems = [];
        
        // Start the game
        startGame();
        
        // Game functions
        function startGame() {
            currentQuestionIndex = 0;
            score = 0;
            userAnswers.length = 0;
            loadQuestion(currentQuestionIndex);
            updateScore();
        }
        
        function loadQuestion(index) {
            // Reset state for new question
            answered = false;
            clearInterval(timer);
            
            // Hide all question type containers
            document.querySelectorAll('.question-type-container').forEach(container => {
                container.style.display = 'none';
            });
            
            // Hide buttons
            nextBtn.style.display = 'none';
            finishBtn.style.display = 'none';
            
            // Get current question
            const question = questions[index];
            
            // Update UI
            questionTextEl.textContent = question.questionText;
            currentQuestionEl.textContent = index + 1;
            
            // Determine question type and show appropriate interface
            const questionType = question.questionType || 'multiple-choice';
            
            switch(questionType) {
                case 'multiple-choice':
                    loadMultipleChoiceQuestion(question);
                    break;
                case 'text-answer':
                    loadTextAnswerQuestion();
                    break;
                case 'ordering':
                    loadOrderingQuestion(question);
                    break;
                case 'true-false':
                    loadTrueFalseQuestion();
                    break;
                default:
                    loadMultipleChoiceQuestion(question);
            }
            
            // Set timer
            timeLeft = question.timeLimit || 30;
            timerTextEl.textContent = timeLeft;
            timerBarEl.style.width = '100%';
            
            // Start timer
            startTimer();
        }
        
        function loadMultipleChoiceQuestion(question) {
            optionsGridEl.style.display = 'grid';
            optionsGridEl.innerHTML = '';
            
            const options = question.options || [];
            
            options.forEach((option, optIdx) => {
                const optionBtn = document.createElement('button');
                optionBtn.className = `option-button ${getColorClass(optIdx)}`;
                optionBtn.dataset.index = optIdx;
                
                optionBtn.innerHTML = `
                    <div class="option-symbol">${optionSymbols[optIdx % 4]}</div>
                    <div class="option-text">${option.text}</div>
                `;
                
                optionBtn.addEventListener('click', () => selectOption(optIdx));
                optionsGridEl.appendChild(optionBtn);
            });
        }
        
        function loadTextAnswerQuestion() {
            textAnswerContainerEl.style.display = 'flex';
            textAnswerInputEl.value = '';
            textAnswerInputEl.focus();
            
            submitTextAnswerBtn.onclick = () => {
                submitTextAnswer(textAnswerInputEl.value);
            };
            
            // Allow enter key to submit
            textAnswerInputEl.onkeydown = (e) => {
                if (e.key === 'Enter') {
                    submitTextAnswer(textAnswerInputEl.value);
                }
            };
        }
        
        function loadOrderingQuestion(question) {
            orderingContainerEl.style.display = 'flex';
            orderingItemsEl.innerHTML = '';
            
            // Get items to order (either from orderItems or create from options)
            const items = question.orderItems || question.options?.map(opt => opt.text) || [];
            
            // Shuffle items for display
            orderingItems = [...items];
            shuffle(orderingItems);
            
            // Create DOM elements for each item
            orderingItems.forEach((item, idx) => {
                const itemEl = document.createElement('div');
                itemEl.className = 'ordering-item';
                itemEl.draggable = true;
                itemEl.dataset.index = idx;
                itemEl.innerHTML = `
                    <div class="ordering-handle"><i class="fas fa-grip-lines"></i></div>
                    <div class="ordering-text">${item}</div>
                `;
                orderingItemsEl.appendChild(itemEl);
                
                // Add drag events
                itemEl.addEventListener('dragstart', handleDragStart);
                itemEl.addEventListener('dragover', handleDragOver);
                itemEl.addEventListener('drop', handleDrop);
                itemEl.addEventListener('dragend', handleDragEnd);
            });
            
            submitOrderingBtn.onclick = submitOrdering;
        }
        
        function loadTrueFalseQuestion() {
            trueFalseContainerEl.style.display = 'flex';
            
            // Reset button states
            trueButtonEl.classList.remove('selected');
            falseButtonEl.classList.remove('selected');
            
            // Set click handlers
            trueButtonEl.onclick = () => {
                selectTrueFalse(true);
            };
            
            falseButtonEl.onclick = () => {
                selectTrueFalse(false);
            };
        }
        
        function getColorClass(index) {
            const colors = ['red', 'blue', 'yellow', 'green'];
            return colors[index % 4];
        }
        
        function startTimer() {
            timer = setInterval(() => {
                timeLeft--;
                timerTextEl.textContent = timeLeft;
                
                // Update timer bar width
                const percentage = (timeLeft / (questions[currentQuestionIndex].timeLimit || 30)) * 100;
                timerBarEl.style.width = `${percentage}%`;
                
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    if (!answered) {
                        // Time's up without answer
                        handleTimeUp();
                    }
                }
            }, 1000);
        }
        
        // Multiple choice answer handling
        function selectOption(optionIndex) {
            if (answered) return; // Prevent multiple selections
            answered = true;
            clearInterval(timer);
            
            const selectedOption = optionsGridEl.children[optionIndex];
            selectedOption.classList.add('selected');
            
            const question = questions[currentQuestionIndex];
            const isCorrect = question.options[optionIndex].isCorrect;
            
            // Save user's answer
            userAnswers.push({
                questionIndex: currentQuestionIndex,
                selectedOption: optionIndex,
                correct: isCorrect,
                type: 'multiple-choice'
            });
            
            // Update score if correct
            if (isCorrect) {
                score += calculatePoints(timeLeft);
                updateScore();
            }
            
            // Show correct/incorrect options
            setTimeout(() => {
                showMultipleChoiceAnswers();
                
                // Show next button
                showNextButton();
            }, 500);
        }
        
        // Text answer handling
        function submitTextAnswer(answer) {
            if (answered) return; // Prevent multiple submissions
            answered = true;
            clearInterval(timer);
            
            const question = questions[currentQuestionIndex];
            let isCorrect = false;
            
            if (question.textAnswer) {
                const userAnswer = answer.trim();
                const correctAnswer = question.textAnswer.correctAnswer;
                const caseSensitive = question.textAnswer.caseSensitive || false;
                const exactMatch = question.textAnswer.exactMatch || false;
                const alternativeAnswers = question.textAnswer.alternativeAnswers || [];
                
                // Check if answer is correct
                if (caseSensitive) {
                    if (exactMatch) {
                        isCorrect = userAnswer === correctAnswer || 
                                   alternativeAnswers.includes(userAnswer);
                    } else {
                        isCorrect = correctAnswer.includes(userAnswer) || 
                                   alternativeAnswers.some(alt => alt.includes(userAnswer));
                    }
                } else {
                    const lowerUserAnswer = userAnswer.toLowerCase();
                    const lowerCorrectAnswer = correctAnswer.toLowerCase();
                    const lowerAlternatives = alternativeAnswers.map(alt => alt.toLowerCase());
                    
                    if (exactMatch) {
                        isCorrect = lowerUserAnswer === lowerCorrectAnswer || 
                                   lowerAlternatives.includes(lowerUserAnswer);
                    } else {
                        isCorrect = lowerCorrectAnswer.includes(lowerUserAnswer) || 
                                   lowerAlternatives.some(alt => alt.includes(lowerUserAnswer));
                    }
                }
            }
            
            // Save user's answer
            userAnswers.push({
                questionIndex: currentQuestionIndex,
                textAnswer: answer,
                correct: isCorrect,
                type: 'text-answer'
            });
            
            // Update score if correct
            if (isCorrect) {
                score += calculatePoints(timeLeft);
                updateScore();
                textAnswerInputEl.style.borderColor = "var(--kahoot-green)";
                textAnswerInputEl.style.backgroundColor = "rgba(38, 137, 12, 0.2)";
            } else {
                textAnswerInputEl.style.borderColor = "var(--kahoot-red)";
                textAnswerInputEl.style.backgroundColor = "rgba(226, 27, 60, 0.2)";
            }
            
            textAnswerInputEl.disabled = true;
            submitTextAnswerBtn.disabled = true;
            
            // Show feedback
            const feedbackEl = document.createElement('div');
            feedbackEl.className = isCorrect ? 'answer-feedback correct' : 'answer-feedback incorrect';
            feedbackEl.innerHTML = isCorrect ? 
                '<i class="fas fa-check-circle"></i> Correct!' : 
                `<i class="fas fa-times-circle"></i> Incorrect! The answer was: <strong>${question.textAnswer?.correctAnswer || 'N/A'}</strong>`;
            textAnswerContainerEl.appendChild(feedbackEl);
            
            // Show next button
            showNextButton();
        }
        
        // Ordering answer handling
        function submitOrdering() {
            if (answered) return; // Prevent multiple submissions
            answered = true;
            clearInterval(timer);
            
            const question = questions[currentQuestionIndex];
            const correctOrder = question.orderItems || question.options?.map(opt => opt.text) || [];
            const currentOrder = [];
            
            // Get current order from DOM
            const orderingItemsElements = orderingItemsEl.querySelectorAll('.ordering-item');
            orderingItemsElements.forEach(item => {
                currentOrder.push(orderingItems[parseInt(item.dataset.index)]);
            });
            
            // Check if order is correct
            const isCorrect = arraysEqual(currentOrder, correctOrder);
            
            // Save user's answer
            userAnswers.push({
                questionIndex: currentQuestionIndex,
                submittedOrder: currentOrder,
                correct: isCorrect,
                type: 'ordering'
            });
            
            // Update score if correct
            if (isCorrect) {
                score += calculatePoints(timeLeft);
                updateScore();
            }
            
            // Highlight correct/incorrect
            orderingItemsElements.forEach((item, idx) => {
                if (orderingItems[parseInt(item.dataset.index)] === correctOrder[idx]) {
                    item.style.backgroundColor = "var(--kahoot-green)";
                } else {
                    item.style.backgroundColor = "var(--kahoot-red)";
                    item.style.opacity = "0.7";
                }
            });
            
            // Disable further interaction
            submitOrderingBtn.disabled = true;
            orderingItemsElements.forEach(item => {
                item.draggable = false;
            });
            
            // Show next button
            showNextButton();
        }
        
        // True/False answer handling
        function selectTrueFalse(isTrue) {
            if (answered) return; // Prevent multiple selections
            answered = true;
            clearInterval(timer);
            
            // Update UI
            trueButtonEl.classList.toggle('selected', isTrue);
            falseButtonEl.classList.toggle('selected', !isTrue);
            
            const question = questions[currentQuestionIndex];
            const isCorrect = question.isTrueCorrect === isTrue;
            
            // Save user's answer
            userAnswers.push({
                questionIndex: currentQuestionIndex,
                selectedAnswer: isTrue ? 'true' : 'false',
                correct: isCorrect,
                type: 'true-false'
            });
            
            // Update score if correct
            if (isCorrect) {
                score += calculatePoints(timeLeft);
                updateScore();
            }
            
            // Show feedback
            setTimeout(() => {
                if (question.isTrueCorrect) {
                    trueButtonEl.style.borderColor = "white";
                    trueButtonEl.style.boxShadow = "0 0 20px rgba(255, 255, 255, 0.5)";
                } else {
                    falseButtonEl.style.borderColor = "white";
                    falseButtonEl.style.boxShadow = "0 0 20px rgba(255, 255, 255, 0.5)";
                }
                
                // Show next button
                showNextButton();
            }, 500);
        }
        
        // Show the correct/incorrect answers for multiple choice
        function showMultipleChoiceAnswers() {
            const question = questions[currentQuestionIndex];
            const options = optionsGridEl.children;
            
            for (let i = 0; i < options.length; i++) {
                if (question.options[i].isCorrect) {
                    options[i].classList.add('correct');
                } else if (options[i].classList.contains('selected')) {
                    options[i].classList.add('incorrect');
                }
            }
        }
        
        function handleTimeUp() {
            answered = true;
            
            // Get the current question type
            const question = questions[currentQuestionIndex];
            const questionType = question.questionType || 'multiple-choice';
            
            // Save as wrong answer based on question type
            let answerData = {
                questionIndex: currentQuestionIndex,
                correct: false,
                type: questionType
            };
            
            switch(questionType) {
                case 'multiple-choice':
                    answerData.selectedOption = -1; // No option selected
                    showMultipleChoiceAnswers();
                    break;
                case 'text-answer':
                    answerData.textAnswer = '';
                    textAnswerInputEl.disabled = true;
                    submitTextAnswerBtn.disabled = true;
                    // Show correct answer
                    const feedbackEl = document.createElement('div');
                    feedbackEl.className = 'answer-feedback timeout';
                    feedbackEl.innerHTML = `<i class="fas fa-clock"></i> Time's up! The answer was: <strong>${question.textAnswer?.correctAnswer || 'N/A'}</strong>`;
                    textAnswerContainerEl.appendChild(feedbackEl);
                    break;
                case 'ordering':
                    answerData.submittedOrder = [];
                    submitOrderingBtn.disabled = true;
                    // Highlight correct order
                    const correctOrder = question.orderItems || [];
                    const orderingItemsElements = orderingItemsEl.querySelectorAll('.ordering-item');
                    orderingItemsElements.forEach((item, idx) => {
                        item.style.backgroundColor = "var(--kahoot-red)";
                        item.style.opacity = "0.7";
                        item.draggable = false;
                    });
                    break;
                case 'true-false':
                    answerData.selectedAnswer = null;
                    // Highlight correct answer
                    if (question.isTrueCorrect) {
                        trueButtonEl.style.borderColor = "white";
                        trueButtonEl.style.boxShadow = "0 0 20px rgba(255, 255, 255, 0.5)";
                    } else {
                        falseButtonEl.style.borderColor = "white";
                        falseButtonEl.style.boxShadow = "0 0 20px rgba(255, 255, 255, 0.5)";
                    }
                    break;
            }
            
            userAnswers.push(answerData);
            
            // Show next button
            showNextButton();
        }
        
        function showNextButton() {
            // Show next button or finish button based on question index
            if (currentQuestionIndex < questions.length - 1) {
                nextBtn.style.display = 'block';
            } else {
                finishBtn.style.display = 'block';
            }
        }
        
        function calculatePoints(timeLeft) {
            // Base points plus bonus for faster answers
            return 100 + (timeLeft * 2);
        }
        
        function updateScore() {
            scoreEl.textContent = score;
        }
        
        function showResults() {
            const totalQuestions = questions.length;
            const correctAnswers = userAnswers.filter(a => a.correct).length;
            const accuracy = Math.round((correctAnswers / totalQuestions) * 100);
            
            // Update results UI
            finalScoreEl.textContent = score;
            accuracyTextEl.textContent = `${accuracy}%`;
            accuracyFillEl.style.background = `conic-gradient(var(--kahoot-green) 0%, var(--kahoot-green) ${accuracy}%, transparent ${accuracy}%, transparent 100%)`;
            correctCountEl.textContent = correctAnswers;
            incorrectCountEl.textContent = totalQuestions - correctAnswers;
            
            // Show modal
            resultsModal.style.display = 'flex';
        }
        
        // Utility functions for ordering questions
        function handleDragStart(e) {
            this.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/plain', this.dataset.index);
        }
        
        function handleDragOver(e) {
            e.preventDefault();
            return false;
        }
        
        function handleDrop(e) {
            e.stopPropagation();
            
            const draggedItemIndex = e.dataTransfer.getData('text/plain');
            const draggedItem = document.querySelector(`.ordering-item[data-index="${draggedItemIndex}"]`);
            const dropTarget = this;
            
            if (draggedItem !== dropTarget) {
                // Get positions in the container
                const allItems = Array.from(orderingItemsEl.querySelectorAll('.ordering-item'));
                const draggedPosition = allItems.indexOf(draggedItem);
                const dropPosition = allItems.indexOf(dropTarget);
                
                // Reorder elements
                if (draggedPosition < dropPosition) {
                    orderingItemsEl.insertBefore(draggedItem, dropTarget.nextSibling);
                } else {
                    orderingItemsEl.insertBefore(draggedItem, dropTarget);
                }
            }
            
            return false;
        }
        
        function handleDragEnd() {
            document.querySelectorAll('.ordering-item').forEach(item => {
                item.classList.remove('dragging');
            });
        }
        
        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }
        
        function arraysEqual(a, b) {
            if (a.length !== b.length) return false;
            return a.every((val, idx) => val === b[idx]);
        }
        
        // Event Listeners
        nextBtn.addEventListener('click', () => {
            currentQuestionIndex++;
            if (currentQuestionIndex < questions.length) {
                loadQuestion(currentQuestionIndex);
            }
        });
        
        finishBtn.addEventListener('click', () => {
            showResults();
        });
        
        playAgainBtn.addEventListener('click', () => {
            resultsModal.style.display = 'none';
            startGame();
        });
    });
</script>

<%- include('./partials/footer') %>
