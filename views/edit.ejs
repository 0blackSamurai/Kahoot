<%- include('./partials/header') %>
<link rel="stylesheet" href="/css/kahoot-dark.css">

<div class="page-header">
    <h1><i class="fas fa-edit"></i> Edit Quiz</h1>
    <div class="header-actions">
        <a href="/profile" class="btn-secondary"><i class="fas fa-arrow-left"></i> Back to Profile</a>
    </div>
</div>

<div class="quiz-builder-container">
    <!-- Left Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <form id="quizForm" action="/quiz/edit/<%= quiz._id %>" method="post">
                <div class="form-group">
                    <label for="title">Quiz Title*</label>
                    <input type="text" id="title" name="title" value="<%= quiz.title %>" required>
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" rows="3"><%= quiz.description %></textarea>
                </div>
                <div class="form-group">
                    <label>
                        <input type="checkbox" id="isPublic" name="isPublic" <%= quiz.isPublic ? 'checked' : '' %>>
                        Make this quiz public
                    </label>
                </div>
                <input type="hidden" id="questionsData" name="questions" value="">
            </form>
        </div>
        
        <div class="questions-nav">
            <div class="questions-nav-title">
                Questions
            </div>
            
            <div id="questionsNavList">
                <div id="noQuestionsNavMessage" style="display:none;">
                    No questions yet
                </div>
            </div>
            
            <button type="button" id="addQuestionBtn" class="btn-add-question">
                <i class="fas fa-plus"></i> Add Question
            </button>
        </div>
        
        <div class="form-actions">
            <button type="button" class="btn-secondary" onclick="window.location.href='/quiz/view/<%= quiz._id %>'">Cancel</button>
            <button type="button" class="btn-primary" id="saveQuizBtn">Save Quiz</button>
        </div>
    </div>
    
    <!-- Main Content Area -->
    <div class="content-area">
        <div id="questionsContainer">
            <div class="no-questions" id="noQuestionsMessage" style="display:none;">
                <i class="fas fa-question-circle"></i>
                <p>No questions yet! Click "Add Question" to get started.</p>
            </div>
            <!-- Questions will be added here dynamically -->
        </div>
    </div>
</div>

<!-- Question Template (hidden) -->
<div id="questionTemplate" style="display:none">
    <div class="question-card" data-question-index="{QID}">
        <div class="question-header">
            <h4>Question {QNUM}</h4>
            <div class="question-actions">
                <button type="button" class="btn-delete-question" data-question-id="{QID}">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
        
        <div class="question-media">
            <div>Find and add media</div>
            <div class="media-icons">
                <button type="button" class="btn-media-none active">None</button>
                <button type="button" class="btn-media-image">Image</button>
                <button type="button" class="btn-media-video">Video</button>
            </div>
        </div>
        
        <div class="form-group">
            <div class="question-text-container">
                <label for="question-text-{QID}">Question Text*</label>
                <textarea id="question-text-{QID}" class="question-text" required></textarea>
            </div>
        </div>
        
        <div class="question-settings">
            <div class="setting-item">
                <label>Question Type</label>
                <select class="question-type">
                    <option value="multiple-choice">Multiple Choice</option>
                    <option value="text-answer">Text Answer</option>
                    <option value="true-false">True/False</option>
                    <option value="ordering">Ordering</option>
                </select>
            </div>
            <div class="setting-item">
                <label>Time Limit</label>
                <select class="time-limit">
                    <option value="10">10 seconds</option>
                    <option value="20">20 seconds</option>
                    <option value="30" selected>30 seconds</option>
                    <option value="60">60 seconds</option>
                    <option value="90">90 seconds</option>
                    <option value="120">120 seconds</option>
                </select>
            </div>
            <div class="setting-item">
                <label>Points</label>
                <select class="points">
                    <option value="standard" selected>Standard</option>
                    <option value="double">Double</option>
                    <option value="no-points">No points</option>
                </select>
            </div>
        </div>
        
        <!-- Multiple Choice Question (default) -->
        <div class="options-container multiple-choice-container">
            <label>Options*</label>
            <p class="help-text">Select the correct answer(s)</p>
            
            <div class="options-list">
                <!-- Options will be generated here -->
            </div>
            
            <button type="button" class="btn-add-option">
                <i class="fas fa-plus"></i> Add Option
            </button>
        </div>
        
        <!-- Text Answer Question (hidden by default) -->
        <div class="options-container text-answer-container" style="display:none">
            <label>Correct Answer*</label>
            <p class="help-text">Enter the text that will be considered correct (case insensitive)</p>
            
            <div class="text-answer-input">
                <input type="text" class="text-answer-correct" placeholder="Correct answer">
            </div>
            
            <div class="text-answer-options">
                <label>
                    <input type="checkbox" class="text-answer-case-sensitive">
                    Case sensitive
                </label>
                <label>
                    <input type="checkbox" class="text-answer-exact-match">
                    Exact match required
                </label>
            </div>
            
            <label>Alternative Answers (optional)</label>
            <div class="alternative-answers">
                <!-- Alternative answers will be added here -->
            </div>
            <button type="button" class="btn-add-alt-answer">
                <i class="fas fa-plus"></i> Add Alternative Answer
            </button>
        </div>
        
        <!-- True/False Question (hidden by default) -->
        <div class="options-container true-false-container" style="display:none">
            <label>Correct Answer*</label>
            <div class="true-false-options">
                <div class="radio-group">
                    <label class="radio-label">
                        <input type="radio" name="true-false-{QID}" class="true-option" value="true"> True
                    </label>
                    <label class="radio-label">
                        <input type="radio" name="true-false-{QID}" class="false-option" value="false"> False
                    </label>
                </div>
            </div>
        </div>
        
        <!-- Ordering Question (hidden by default) -->
        <div class="options-container ordering-container" style="display:none">
            <label>Items to Order*</label>
            <p class="help-text">Add items in the correct order. Players will need to arrange them correctly.</p>
            
            <div class="ordering-items">
                <!-- Ordering items will be added here -->
            </div>
            
            <button type="button" class="btn-add-ordering-item">
                <i class="fas fa-plus"></i> Add Item
            </button>
        </div>
    </div>
</div>

<!-- Option Template (hidden) -->
<div id="optionTemplate" style="display:none">
    <div class="option-item" data-option-index="{OID}">
        <div class="option-input-group">
            <input type="checkbox" class="option-correct">
            <input type="text" class="option-text" placeholder="Option text">
        </div>
        <button type="button" class="btn-delete-option" data-option-id="{OID}">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

<!-- Alternative Answer Template (hidden) -->
<div id="altAnswerTemplate" style="display:none">
    <div class="alt-answer-item" data-alt-index="{AID}">
        <div class="alt-answer-input-group">
            <input type="text" class="alt-answer-text" placeholder="Alternative answer">
        </div>
        <button type="button" class="btn-delete-alt-answer" data-alt-id="{AID}">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

<!-- Ordering Item Template (hidden) -->
<div id="orderingItemTemplate" style="display:none">
    <div class="ordering-item" data-ordering-index="{ORID}">
        <div class="ordering-number">{ORNM}</div>
        <div class="ordering-input-group">
            <input type="text" class="ordering-text" placeholder="Item text">
        </div>
        <button type="button" class="btn-delete-ordering-item" data-ordering-id="{ORID}">
            <i class="fas fa-times"></i>
        </button>
        <div class="ordering-handle">
            <i class="fas fa-grip-lines"></i>
        </div>
    </div>
</div>

<!-- Question Navigation Item Template (hidden) -->
<div id="questionNavTemplate" style="display:none">
    <div class="question-item" data-question-id="{QID}">
        Question {QNUM}
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const questionsContainer = document.getElementById('questionsContainer');
        const questionsNavList = document.getElementById('questionsNavList');
        const questionsData = document.getElementById('questionsData');
        const questionTemplate = document.getElementById('questionTemplate').innerHTML;
        const optionTemplate = document.getElementById('optionTemplate').innerHTML;
        const altAnswerTemplate = document.getElementById('altAnswerTemplate').innerHTML;
        const orderingItemTemplate = document.getElementById('orderingItemTemplate').innerHTML;
        const questionNavTemplate = document.getElementById('questionNavTemplate').innerHTML;
        const noQuestionsMessage = document.getElementById('noQuestionsMessage');
        const noQuestionsNavMessage = document.getElementById('noQuestionsNavMessage');
        
        let questionCount = 0;
        let questions = [];
        let currentQuestionId = null;
        
        // Load existing quiz data
        const quizData = <%- JSON.stringify(quiz) %>;
        
        // Initialize with existing questions
        if (quizData.questions && quizData.questions.length > 0) {
            quizData.questions.forEach(question => {
                const qid = addNewQuestion();
                const questionElement = questionsContainer.querySelector(`.question-card[data-question-index="${qid}"]`);
                
                if (questionElement) {
                    // Set question text
                    const questionTextEl = questionElement.querySelector('.question-text');
                    if (questionTextEl) questionTextEl.value = question.questionText;
                    
                    // Set question type
                    const questionTypeEl = questionElement.querySelector('.question-type');
                    if (questionTypeEl && question.questionType) {
                        questionTypeEl.value = question.questionType;
                        
                        // Show corresponding container based on question type
                        const multipleChoiceContainer = questionElement.querySelector('.multiple-choice-container');
                        const textAnswerContainer = questionElement.querySelector('.text-answer-container');
                        const trueFalseContainer = questionElement.querySelector('.true-false-container');
                        const orderingContainer = questionElement.querySelector('.ordering-container');
                        
                        multipleChoiceContainer.style.display = 'none';
                        textAnswerContainer.style.display = 'none';
                        trueFalseContainer.style.display = 'none';
                        orderingContainer.style.display = 'none';
                        
                        switch(question.questionType) {
                            case 'multiple-choice':
                                multipleChoiceContainer.style.display = 'block';
                                
                                // Load options
                                if (question.options && question.options.length) {
                                    const optionsList = questionElement.querySelector('.options-list');
                                    optionsList.innerHTML = '';
                                    
                                    question.options.forEach((option, index) => {
                                        const optId = addOption(qid);
                                        const optionElement = questionElement.querySelector(`.option-item[data-option-index="${optId}"]`);
                                        
                                        if (optionElement) {
                                            const optionTextEl = optionElement.querySelector('.option-text');
                                            const optionCorrectEl = optionElement.querySelector('.option-correct');
                                            
                                            if (optionTextEl) optionTextEl.value = option.text;
                                            if (optionCorrectEl) optionCorrectEl.checked = option.isCorrect;
                                        }
                                    });
                                }
                                break;
                                
                            case 'text-answer':
                                textAnswerContainer.style.display = 'block';
                                
                                // Load text answer settings
                                if (question.textAnswer) {
                                    const textAnswerCorrectEl = textAnswerContainer.querySelector('.text-answer-correct');
                                    const caseSensitiveEl = textAnswerContainer.querySelector('.text-answer-case-sensitive');
                                    const exactMatchEl = textAnswerContainer.querySelector('.text-answer-exact-match');
                                    const alternativeAnswers = textAnswerContainer.querySelector('.alternative-answers');
                                    
                                    if (textAnswerCorrectEl) textAnswerCorrectEl.value = question.textAnswer.correctAnswer;
                                    if (caseSensitiveEl) caseSensitiveEl.checked = question.textAnswer.caseSensitive;
                                    if (exactMatchEl) exactMatchEl.checked = question.textAnswer.exactMatch;
                                    
                                    // Load alternative answers
                                    if (question.textAnswer.alternativeAnswers && question.textAnswer.alternativeAnswers.length) {
                                        alternativeAnswers.innerHTML = '';
                                        
                                        question.textAnswer.alternativeAnswers.forEach(altAnswer => {
                                            const altId = addAlternativeAnswer(qid);
                                            const altAnswerElement = questionElement.querySelector(`.alt-answer-item[data-alt-index="${altId}"]`);
                                            
                                            if (altAnswerElement) {
                                                const altAnswerTextEl = altAnswerElement.querySelector('.alt-answer-text');
                                                if (altAnswerTextEl) altAnswerTextEl.value = altAnswer;
                                            }
                                        });
                                    }
                                }
                                break;
                                
                            case 'true-false':
                                trueFalseContainer.style.display = 'block';
                                
                                // Load true/false settings
                                const trueOption = trueFalseContainer.querySelector('.true-option');
                                const falseOption = trueFalseContainer.querySelector('.false-option');
                                
                                if (trueOption && falseOption) {
                                    trueOption.checked = question.isTrueCorrect === true;
                                    falseOption.checked = question.isTrueCorrect === false;
                                }
                                break;
                                
                            case 'ordering':
                                orderingContainer.style.display = 'block';
                                
                                // Load ordering items
                                if (question.orderItems && question.orderItems.length) {
                                    const orderingItems = orderingContainer.querySelector('.ordering-items');
                                    orderingItems.innerHTML = '';
                                    
                                    question.orderItems.forEach((item, index) => {
                                        const orderingId = addOrderingItem(qid);
                                        const orderingElement = questionElement.querySelector(`.ordering-item[data-ordering-index="${orderingId}"]`);
                                        
                                        if (orderingElement) {
                                            const orderingTextEl = orderingElement.querySelector('.ordering-text');
                                            if (orderingTextEl) orderingTextEl.value = item;
                                        }
                                    });
                                }
                                break;
                        }
                    }
                    
                    // Set time limit
                    const timeLimitEl = questionElement.querySelector('.time-limit');
                    if (timeLimitEl && question.timeLimit) {
                        timeLimitEl.value = question.timeLimit;
                    }
                    
                    // Set points
                    const pointsEl = questionElement.querySelector('.points');
                    if (pointsEl && question.points) {
                        pointsEl.value = question.points;
                    }
                }
            });
            
            // Show the first question
            if (questions.length > 0) {
                showQuestion(questions[0]);
            }
        } else {
            // Add first question if there are no existing questions
            const firstQid = addNewQuestion();
            showQuestion(firstQid);
        }
        
        // Add Question Button Click
        document.getElementById('addQuestionBtn').addEventListener('click', function() {
            const qid = addNewQuestion();
            showQuestion(qid);
        });
        
        // Save Quiz Button Click
        document.getElementById('saveQuizBtn').addEventListener('click', function() {
            if (!validateForm()) return;
            
            // Collect data from form fields
            const questionsArray = collectQuestionData();
            
            // Set questions JSON in hidden field
            questionsData.value = JSON.stringify(questionsArray);
            
            // Submit the form
            document.getElementById('quizForm').submit();
        });
        
        // Form Submit
        document.getElementById('quizForm').addEventListener('submit', function(e) {
            if (!validateForm()) {
                e.preventDefault();
                return;
            }
            
            // Collect data from form fields
            const questionsArray = collectQuestionData();
            
            // Set questions JSON in hidden field
            questionsData.value = JSON.stringify(questionsArray);
        });
        
        // Event Delegation for Questions Container
        questionsContainer.addEventListener('click', function(e) {
            // Delete Question
            if (e.target.closest('.btn-delete-question')) {
                const btn = e.target.closest('.btn-delete-question');
                const qid = btn.getAttribute('data-question-id');
                deleteQuestion(qid);
                return;
            }
            
            // Add Option
            if (e.target.closest('.btn-add-option')) {
                const questionCard = e.target.closest('.question-card');
                const qid = questionCard.getAttribute('data-question-index');
                addOption(qid);
                return;
            }
            
            // Delete Option
            if (e.target.closest('.btn-delete-option')) {
                const btn = e.target.closest('.btn-delete-option');
                const optionItem = btn.closest('.option-item');
                optionItem.remove();
                return;
            }
            
            // Add Alternative Answer
            if (e.target.closest('.btn-add-alt-answer')) {
                const questionCard = e.target.closest('.question-card');
                const qid = questionCard.getAttribute('data-question-index');
                addAlternativeAnswer(qid);
                return;
            }
            
            // Delete Alternative Answer
            if (e.target.closest('.btn-delete-alt-answer')) {
                const btn = e.target.closest('.btn-delete-alt-answer');
                const altItem = btn.closest('.alt-answer-item');
                altItem.remove();
                return;
            }
            
            // Add Ordering Item
            if (e.target.closest('.btn-add-ordering-item')) {
                const questionCard = e.target.closest('.question-card');
                const qid = questionCard.getAttribute('data-question-index');
                addOrderingItem(qid);
                return;
            }
            
            // Delete Ordering Item
            if (e.target.closest('.btn-delete-ordering-item')) {
                const btn = e.target.closest('.btn-delete-ordering-item');
                const orderingItem = btn.closest('.ordering-item');
                orderingItem.remove();
                updateOrderingNumbers(e.target.closest('.ordering-items'));
                return;
            }
        });
        
        // Add change event listeners for question type selectors
        questionsContainer.addEventListener('change', function(e) {
            if (e.target.classList.contains('question-type')) {
                const questionType = e.target.value;
                const questionCard = e.target.closest('.question-card');
                
                // Hide all question type specific containers
                const typeContainers = questionCard.querySelectorAll('.options-container');
                typeContainers.forEach(container => {
                    container.style.display = 'none';
                });
                
                // Show the selected container
                const selectedContainer = questionCard.querySelector(`.${questionType}-container`);
                if (selectedContainer) {
                    selectedContainer.style.display = 'block';
                }
            }
        });
        
        // Add event handler for ordering items
        questionsContainer.addEventListener('click', function(e) {
            const dragHandle = e.target.closest('.ordering-handle');
            if (dragHandle) {
                // We're not implementing drag/drop in this basic example
                // In a real implementation, you'd initialize a drag operation here
                console.log('Drag handle clicked - implement reordering');
            }
        });
        
        // Navigation click events
        questionsNavList.addEventListener('click', function(e) {
            const questionItem = e.target.closest('.question-item');
            if (questionItem) {
                const qid = questionItem.getAttribute('data-question-id');
                showQuestion(qid);
            }
        });
        
        // Helper Functions
        function addNewQuestion() {
            const qid = `q${Date.now()}${Math.floor(Math.random() * 1000)}`;
            questionCount++;
            questions.push(qid);
            
            // Add to navigation
            const navHtml = questionNavTemplate
                .replace(/{QID}/g, qid)
                .replace(/{QNUM}/g, questionCount);
                
            questionsNavList.insertAdjacentHTML('beforeend', navHtml);
            
            // Add to content area
            const questionHtml = questionTemplate
                .replace(/{QID}/g, qid)
                .replace(/{QNUM}/g, questionCount);
                
            questionsContainer.insertAdjacentHTML('beforeend', questionHtml);
            
            // Add two default options for multiple choice
            addOption(qid);
            addOption(qid);
            
            checkQuestionCount();
            return qid;
        }
        
        function addOption(qid) {
            const questionCard = questionsContainer.querySelector(`.question-card[data-question-index="${qid}"]`);
            if (!questionCard) return;
            
            const optionsList = questionCard.querySelector('.options-list');
            const optId = `opt${Date.now()}${Math.floor(Math.random() * 1000)}`;
            
            const optionHtml = optionTemplate
                .replace(/{OID}/g, optId);
                
            optionsList.insertAdjacentHTML('beforeend', optionHtml);
            return optId;
        }
        
        function addAlternativeAnswer(qid) {
            const questionCard = questionsContainer.querySelector(`.question-card[data-question-index="${qid}"]`);
            if (!questionCard) return;
            
            const alternativeAnswers = questionCard.querySelector('.alternative-answers');
            const altId = `alt${Date.now()}${Math.floor(Math.random() * 1000)}`;
            
            const altAnswerHtml = altAnswerTemplate
                .replace(/{AID}/g, altId);
                
            alternativeAnswers.insertAdjacentHTML('beforeend', altAnswerHtml);
            return altId;
        }
        
        function addOrderingItem(qid) {
            const questionCard = questionsContainer.querySelector(`.question-card[data-question-index="${qid}"]`);
            if (!questionCard) return;
            
            const orderingItems = questionCard.querySelector('.ordering-items');
            const orderingId = `ord${Date.now()}${Math.floor(Math.random() * 1000)}`;
            
            const currentNumber = orderingItems.children.length + 1;
            
            const orderingHtml = orderingItemTemplate
                .replace(/{ORID}/g, orderingId)
                .replace(/{ORNM}/g, currentNumber);
                
            orderingItems.insertAdjacentHTML('beforeend', orderingHtml);
            return orderingId;
        }
        
        function updateOrderingNumbers(container) {
            const items = container.querySelectorAll('.ordering-item');
            items.forEach((item, index) => {
                const number = item.querySelector('.ordering-number');
                if (number) {
                    number.textContent = index + 1;
                }
            });
        }
        
        function showQuestion(qid) {
            // Hide all questions
            const allQuestions = questionsContainer.querySelectorAll('.question-card');
            allQuestions.forEach(q => q.style.display = 'none');
            
            // Deselect all nav items
            const allNavItems = questionsNavList.querySelectorAll('.question-item');
            allNavItems.forEach(n => n.classList.remove('active'));
            
            // Show selected question
            const selectedQuestion = questionsContainer.querySelector(`.question-card[data-question-index="${qid}"]`);
            if (selectedQuestion) {
                selectedQuestion.style.display = 'block';
                currentQuestionId = qid;
            }
            
            // Highlight nav item
            const selectedNav = questionsNavList.querySelector(`.question-item[data-question-id="${qid}"]`);
            if (selectedNav) {
                selectedNav.classList.add('active');
            }
        }
        
        function deleteQuestion(qid) {
            // Remove from questions array
            questions = questions.filter(q => q !== qid);
            
            // Remove from DOM
            const questionCard = questionsContainer.querySelector(`.question-card[data-question-index="${qid}"]`);
            if (questionCard) questionCard.remove();
            
            const navItem = questionsNavList.querySelector(`.question-item[data-question-id="${qid}"]`);
            if (navItem) navItem.remove();
            
            // Update question numbers
            updateQuestionNumbers();
            
            // Show another question if the current was deleted
            if (currentQuestionId === qid && questions.length > 0) {
                showQuestion(questions[0]);
            }
            
            checkQuestionCount();
        }
        
        function updateQuestionNumbers() {
            const questionCards = questionsContainer.querySelectorAll('.question-card');
            const navItems = questionsNavList.querySelectorAll('.question-item');
            
            questionCount = questionCards.length;
            
            questionCards.forEach((card, index) => {
                const heading = card.querySelector('h4');
                if (heading) {
                    heading.textContent = `Question ${index + 1}`;
                }
            });
            
            navItems.forEach((item, index) => {
                item.textContent = `Question ${index + 1}`;
            });
        }
        
        function checkQuestionCount() {
            if (questions.length === 0) {
                noQuestionsMessage.style.display = 'flex';
                noQuestionsNavMessage.style.display = 'block';
            } else {
                noQuestionsMessage.style.display = 'none';
                noQuestionsNavMessage.style.display = 'none';
            }
        }
        
        function validateForm() {
            // Basic validation
            if (!document.getElementById('title').value.trim()) {
                alert('Please enter a quiz title.');
                return false;
            }
            
            if (questions.length === 0) {
                alert('Please add at least one question.');
                return false;
            }
            
            // Check each question
            for (const qid of questions) {
                const questionCard = questionsContainer.querySelector(`.question-card[data-question-index="${qid}"]`);
                const questionText = questionCard.querySelector('.question-text').value.trim();
                
                if (!questionText) {
                    alert('Each question must have text. Please check question ' + questionCard.querySelector('h4').textContent);
                    showQuestion(qid);
                    return false;
                }
                
                const questionType = questionCard.querySelector('.question-type').value;
                
                if (questionType === 'multiple-choice') {
                    const options = questionCard.querySelectorAll('.option-item');
                    if (options.length < 2) {
                        alert('Multiple choice questions must have at least 2 options. Please check question ' + questionCard.querySelector('h4').textContent);
                        showQuestion(qid);
                        return false;
                    }
                    
                    let hasCorrectOption = false;
                    let hasEmptyOption = false;
                    
                    options.forEach(option => {
                        if (option.querySelector('.option-correct').checked) {
                            hasCorrectOption = true;
                        }
                        
                        if (!option.querySelector('.option-text').value.trim()) {
                            hasEmptyOption = true;
                        }
                    });
                    
                    if (hasEmptyOption) {
                        alert('Each option must have text. Please check question ' + questionCard.querySelector('h4').textContent);
                        showQuestion(qid);
                        return false;
                    }
                    
                    if (!hasCorrectOption) {
                        alert('Multiple choice questions must have at least one correct option. Please check question ' + questionCard.querySelector('h4').textContent);
                        showQuestion(qid);
                        return false;
                    }
                } else if (questionType === 'text-answer') {
                    const correctAnswer = questionCard.querySelector('.text-answer-correct').value.trim();
                    
                    if (!correctAnswer) {
                        alert('Text answer questions must have a correct answer. Please check question ' + questionCard.querySelector('h4').textContent);
                        showQuestion(qid);
                        return false;
                    }
                } else if (questionType === 'true-false') {
                    const trueSelected = questionCard.querySelector('.true-option').checked;
                    const falseSelected = questionCard.querySelector('.false-option').checked;
                    
                    if (!trueSelected && !falseSelected) {
                        alert('True/False questions must have an answer selected. Please check question ' + questionCard.querySelector('h4').textContent);
                        showQuestion(qid);
                        return false;
                    }
                } else if (questionType === 'ordering') {
                    const items = questionCard.querySelectorAll('.ordering-item');
                    
                    if (items.length < 2) {
                        alert('Ordering questions must have at least 2 items. Please check question ' + questionCard.querySelector('h4').textContent);
                        showQuestion(qid);
                        return false;
                    }
                    
                    let hasEmptyItem = false;
                    items.forEach(item => {
                        if (!item.querySelector('.ordering-text').value.trim()) {
                            hasEmptyItem = true;
                        }
                    });
                    
                    if (hasEmptyItem) {
                        alert('Each ordering item must have text. Please check question ' + questionCard.querySelector('h4').textContent);
                        showQuestion(qid);
                        return false;
                    }
                }
            }
            
            return true;
        }
        
        function collectQuestionData() {
            const questionsArray = [];
            
            for (const qid of questions) {
                const questionCard = questionsContainer.querySelector(`.question-card[data-question-index="${qid}"]`);
                const questionText = questionCard.querySelector('.question-text').value.trim();
                const questionType = questionCard.querySelector('.question-type').value;
                const timeLimit = parseInt(questionCard.querySelector('.time-limit').value);
                const points = questionCard.querySelector('.points').value;
                
                const questionData = {
                    questionText,
                    questionType,
                    timeLimit,
                    points
                };
                
                // Set type-specific data
                if (questionType === 'multiple-choice') {
                    const options = [];
                    const optionItems = questionCard.querySelectorAll('.option-item');
                    
                    optionItems.forEach(item => {
                        options.push({
                            text: item.querySelector('.option-text').value.trim(),
                            isCorrect: item.querySelector('.option-correct').checked
                        });
                    });
                    
                    questionData.options = options;
                } else if (questionType === 'text-answer') {
                    const correctAnswer = questionCard.querySelector('.text-answer-correct').value.trim();
                    const caseSensitive = questionCard.querySelector('.text-answer-case-sensitive').checked;
                    const exactMatch = questionCard.querySelector('.text-answer-exact-match').checked;
                    
                    const alternativeAnswers = [];
                    const altItems = questionCard.querySelectorAll('.alt-answer-item');
                    
                    altItems.forEach(item => {
                        const altText = item.querySelector('.alt-answer-text').value.trim();
                        if (altText) {
                            alternativeAnswers.push(altText);
                        }
                    });
                    
                    questionData.textAnswer = {
                        correctAnswer,
                        caseSensitive,
                        exactMatch,
                        alternativeAnswers
                    };
                } else if (questionType === 'true-false') {
                    questionData.isTrueCorrect = questionCard.querySelector('.true-option').checked;
                } else if (questionType === 'ordering') {
                    const orderItems = [];
                    const orderingItems = questionCard.querySelectorAll('.ordering-item');
                    
                    orderingItems.forEach(item => {
                        const itemText = item.querySelector('.ordering-text').value.trim();
                        if (itemText) {
                            orderItems.push(itemText);
                        }
                    });
                    
                    questionData.orderItems = orderItems;
                }
                
                questionsArray.push(questionData);
            }
            
            return questionsArray;
        }
    });
</script>

<style>
    .quiz-builder-container {
        display: flex;
        gap: 20px;
        height: calc(100vh - 150px);
        margin-top: 20px;
    }
    
    .sidebar {
        width: 300px;
        background-color: var(--dark-card-bg);
        border-radius: 10px;
        padding: 20px;
        display: flex;
        flex-direction: column;
        height: 100%;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .sidebar-header {
        margin-bottom: 20px;
    }
    
    .form-group {
        margin-bottom: 15px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        color: var(--dark-text-secondary);
    }
    
    .form-group input[type="text"],
    .form-group textarea {
        width: 100%;
        padding: 8px 12px;
        border-radius: 5px;
        border: 1px solid var(--dark-border);
        background-color: var(--dark-input-bg);
        color: var(--dark-text);
    }
    
    .questions-nav {
        flex: 1;
        overflow-y: auto;
        margin-bottom: 20px;
    }
    
    .questions-nav-title {
        font-weight: bold;
        margin-bottom: 10px;
        color: var(--dark-text);
    }
    
    .question-item {
        padding: 12px;
        margin-bottom: 8px;
        background-color: var(--dark-secondary-bg);
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .question-item:hover {
        background-color: var(--dark-hover);
    }
    
    .question-item.active {
        background-color: var(--kahoot-light-purple);
        color: white;
    }
    
    .btn-add-question {
        width: 100%;
        padding: 8px;
        background-color: var(--dark-secondary-bg);
        color: var(--dark-text);
        border: none;
        border-radius: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .btn-add-question:hover {
        background-color: var(--kahoot-green);
        color: white;
    }
    
    .form-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }
    
    .content-area {
        flex: 1;
        overflow-y: auto;
        padding-right: 20px;
    }
    
    .no-questions {
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: var(--dark-text-secondary);
        text-align: center;
    }
    
    .no-questions i {
        font-size: 3rem;
        margin-bottom: 15px;
    }
    
    .question-card {
        background-color: var(--dark-card-bg);
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    
    .question-header h4 {
        margin: 0;
        color: var(--kahoot-light-purple);
        font-size: 1.2rem;
    }
    
    .btn-delete-question {
        background-color: transparent;
        color: var(--dark-text-secondary);
        border: none;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .btn-delete-question:hover {
        color: var(--kahoot-red);
    }
    
    .question-media {
        background-color: var(--dark-secondary-bg);
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        color: var(--dark-text-secondary);
        text-align: center;
    }
    
    .media-icons {
        margin-top: 10px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }
    
    .btn-media-none, .btn-media-image, .btn-media-video {
        background-color: transparent;
        border: 1px solid var(--dark-border);
        padding: 5px 10px;
        border-radius: 4px;
        color: var(--dark-text-secondary);
        cursor: pointer;
    }
    
    .btn-media-none.active {
        background-color: var(--dark-input-bg);
        color: white;
    }
    
    .question-text-container {
        margin-bottom: 15px;
    }
    
    .question-text {
        width: 100%;
        padding: 10px 15px;
        border-radius: 8px;
        border: 1px solid var(--dark-border);
        background-color: var(--dark-input-bg);
        color: var(--dark-text);
        min-height: 100px;
        resize: vertical;
    }
    
    .question-settings {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
    }
    
    .setting-item {
        flex: 1;
    }
    
    .setting-item label {
        display: block;
        margin-bottom: 5px;
        color: var(--dark-text-secondary);
        font-size: 0.9rem;
    }
    
    .setting-item select {
        width: 100%;
        padding: 8px;
        border-radius: 5px;
        border: 1px solid var(--dark-border);
        background-color: var(--dark-input-bg);
        color: var(--dark-text);
    }
    
    .options-container {
        margin-bottom: 15px;
    }
    
    .options-container > label {
        display: block;
        margin-bottom: 5px;
        color: var(--dark-text-secondary);
    }
    
    .help-text {
        color: var(--dark-text-secondary);
        font-size: 0.85rem;
        margin-bottom: 15px;
    }
    
    .options-list {
        margin-bottom: 15px;
    }
    
    .option-item {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        background-color: var(--dark-secondary-bg);
        padding: 10px;
        border-radius: 8px;
    }
    
    .option-input-group {
        display: flex;
        align-items: center;
        flex: 1;
    }
    
    .option-correct {
        margin-right: 10px;
    }
    
    .option-text {
        flex: 1;
        padding: 8px 12px;
        border-radius: 5px;
        border: 1px solid var(--dark-border);
        background-color: var(--dark-input-bg);
        color: var(--dark-text);
    }
    
    .btn-delete-option {
        background-color: transparent;
        color: var(--dark-text-secondary);
        border: none;
        margin-left: 10px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .btn-delete-option:hover {
        color: var(--kahoot-red);
    }
    
    .btn-add-option, .btn-add-alt-answer, .btn-add-ordering-item {
        background-color: var(--dark-secondary-bg);
        color: var(--dark-text);
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: all 0.2s;
    }
    
    .btn-add-option:hover, .btn-add-alt-answer:hover, .btn-add-ordering-item:hover {
        background-color: var(--dark-hover);
    }
    
    /* Text answer styles */
    .text-answer-input {
        margin-bottom: 15px;
    }
    
    .text-answer-correct {
        width: 100%;
        padding: 12px 15px;
        border-radius: 8px;
        border: 1px solid var(--dark-border);
        background-color: var(--dark-input-bg);
        color: var(--dark-text);
    }
    
    .text-answer-options {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }
    
    .alt-answer-item {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        background-color: var(--dark-secondary-bg);
        padding: 10px;
        border-radius: 8px;
    }
    
    .alt-answer-input-group {
        flex: 1;
    }
    
    .alt-answer-text {
        width: 100%;
        padding: 8px 12px;
        border-radius: 5px;
        border: 1px solid var(--dark-border);
        background-color: var(--dark-input-bg);
        color: var(--dark-text);
    }

    /* True/False styles */
    .true-false-options {
        background-color: var(--dark-secondary-bg);
        padding: 15px;
        border-radius: 8px;
    }
    
    .radio-group {
        display: flex;
        gap: 20px;
    }
    
    .radio-label {
        display: flex;
        align-items: center;
        color: var(--dark-text);
        cursor: pointer;
    }
    
    .radio-label input {
        margin-right: 8px;
    }
    
    /* Ordering styles */
    .ordering-items {
        margin-bottom: 15px;
    }
    
    .ordering-item {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
        background-color: var(--dark-secondary-bg);
        padding: 10px;
        border-radius: 8px;
    }
    
    .ordering-number {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background-color: var(--kahoot-light-purple);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 10px;
    }
    
    .ordering-input-group {
        flex: 1;
    }
    
    .ordering-text {
        width: 100%;
        padding: 8px 12px;
        border-radius: 5px;
        border: 1px solid var(--dark-border);
        background-color: var(--dark-input-bg);
        color: var(--dark-text);
    }
    
    .btn-delete-ordering-item {
        background-color: transparent;
        color: var(--dark-text-secondary);
        border: none;
        margin-left: 10px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .ordering-handle {
        color: var(--dark-text-secondary);
        cursor: grab;
        margin-left: 10px;
    }
</style>

<%- include('./partials/footer') %>
