<%- include('./partials/header') %>
<link rel="stylesheet" href="/css/kahoot-dark.css">

<div class="lobby-container">
    <div class="lobby-header">
        <h1>Game Lobby</h1>
        <div class="game-info">
            <div class="game-code-display">
                Game Code: <span class="game-code"><%= gameCode %></span>
            </div>
            <div class="quiz-title"><%= quiz.title %></div>
        </div>
    </div>
    
    <div class="player-info">
        <div class="player-avatar">
            <% const initials = playerName.substring(0, 2).toUpperCase(); %>
            <%= initials %>
        </div>
        <div class="player-name-display">
            <div class="name-label">Your name</div>
            <div class="name-value"><%= playerName %></div>
        </div>
    </div>
    
    <div class="lobby-status">
        <div class="waiting-message">
            <div class="spinner"></div>
            <p>Waiting for the host to start the game...</p>
        </div>
        
        <div class="players-counter">
            <i class="fas fa-users"></i> <span id="playerCount"><%= players.length %></span> players in lobby
        </div>
    </div>
    
    <div class="players-grid" id="playersGrid">
        <% players.forEach(player => { %>
            <div class="player-item" data-id="<%= player.id %>">
                <div class="player-avatar"><%= player.name.substring(0, 2).toUpperCase() %></div>
                <div class="player-name"><%= player.name %></div>
            </div>
        <% }); %>
    </div>
    
    <div class="lobby-footer">
        <a href="/quiz/join" class="btn-leave">Leave Game</a>
    </div>
</div>

<style>
    body {
        background-color: var(--kahoot-purple);
        background-image: linear-gradient(to bottom right, var(--kahoot-purple), var(--kahoot-blue));
        min-height: 100vh;
    }
    
    .lobby-container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
    }
    
    .lobby-header {
        background-color: rgba(30, 30, 30, 0.9);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        text-align: center;
    }
    
    .lobby-header h1 {
        color: white;
        margin-top: 0;
        font-size: 2.2rem;
    }
    
    .game-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        margin-top: 15px;
    }
    
    .game-code-display {
        font-size: 1.2rem;
        color: var(--dark-text-secondary);
    }
    
    .game-code {
        font-family: 'Courier New', monospace;
        color: var(--kahoot-light-purple);
        font-weight: bold;
        letter-spacing: 1px;
    }
    
    .quiz-title {
        font-size: 1.2rem;
        color: white;
        font-weight: bold;
    }
    
    .player-info {
        background-color: rgba(30, 30, 30, 0.9);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
    }
    
    .player-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background-color: var(--kahoot-light-purple);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: bold;
        margin-right: 20px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
    }
    
    .player-name-display {
        flex: 1;
    }
    
    .name-label {
        color: var(--dark-text-secondary);
        margin-bottom: 5px;
    }
    
    .name-value {
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
    }
    
    .lobby-status {
        background-color: rgba(30, 30, 30, 0.9);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        text-align: center;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
    }
    
    .waiting-message {
        margin-bottom: 20px;
    }
    
    .spinner {
        display: inline-block;
        width: 40px;
        height: 40px;
        border: 4px solid rgba(142, 82, 245, 0.3);
        border-radius: 50%;
        border-top-color: var(--kahoot-light-purple);
        animation: spin 1s linear infinite;
    }
    
    .waiting-message p {
        color: var(--dark-text-secondary);
        margin-top: 10px;
        animation: pulse 1.5s infinite;
    }
    
    .players-counter {
        color: white;
        font-size: 1.2rem;
    }
    
    .players-counter i {
        color: var(--kahoot-light-purple);
        margin-right: 5px;
    }
    
    .players-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
        margin-bottom: 20px;
    }
    
    .player-item {
        background-color: rgba(30, 30, 30, 0.9);
        border-radius: 12px;
        padding: 15px;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        animation: fadeIn 0.5s;
    }
    
    .player-item .player-avatar {
        width: 50px;
        height: 50px;
        font-size: 1.2rem;
        margin: 0 0 10px 0;
    }
    
    .player-item .player-name {
        color: white;
        font-size: 0.9rem;
        text-align: center;
        width: 100%;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    .lobby-footer {
        text-align: center;
        margin-top: 30px;
    }
    
    .btn-leave {
        display: inline-block;
        background-color: var(--dark-card-bg);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-size: 1rem;
        cursor: pointer;
        text-decoration: none;
        transition: all 0.2s;
    }
    
    .btn-leave:hover {
        background-color: var(--kahoot-red);
        transform: translateY(-3px);
    }
    
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    
    @keyframes pulse {
        0% { opacity: 0.7; }
        50% { opacity: 1; }
        100% { opacity: 0.7; }
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* Responsive adjustments */
    @media (max-width: 600px) {
        .game-info {
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }
        
        .player-info {
            flex-direction: column;
            text-align: center;
        }
        
        .player-avatar {
            margin: 0 0 15px 0;
        }
    }
</style>

<script src="/socket.io/socket.io.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Connect to Socket.io
        const socket = io();
        
        // Game data
        const gameCode = '<%= gameCode %>';
        const playerName = '<%= playerName %>';
        const playerId = '<%= locals.userId || "" %>';
        const playersGrid = document.getElementById('playersGrid');
        const playerCount = document.getElementById('playerCount');
        
        // Join the game
        socket.emit('join-game', {
            gameCode,
            playerName,
            playerId: playerId || undefined // Only send if defined
        });
        
        // Listen for player events
        socket.on('player-list-update', (data) => {
            updatePlayersList(data.players);
        });
        
        socket.on('player-joined', (player) => {
            addPlayerToUI(player);
            updatePlayerCount();
        });
        
        socket.on('player-left', (data) => {
            removePlayerFromUI(data.playerId);
            updatePlayerCount();
        });
        
        // Game start event
        socket.on('game-started', () => {
            console.log('Game started - redirecting to player view');
            
            // Show a transitioning message to improve UX
            document.querySelector('.waiting-message').innerHTML = `
                <div class="spinner"></div>
                <p>Game is starting! Redirecting...</p>
            `;
            
            // Add a slight delay before redirecting to ensure socket events are processed
            setTimeout(() => {
                // Redirect to player view with the necessary parameters
                window.location.href = `/quiz/play-game/${gameCode}?player=true&playerName=${encodeURIComponent(playerName)}`;
            }, 1000);
        });
        
        function updatePlayersList(players) {
            // Clear existing players
            playersGrid.innerHTML = '';
            
            // Add all players
            players.forEach(player => {
                addPlayerToUI(player);
            });
            
            // Update player count
            playerCount.textContent = players.length;
        }
        
        function addPlayerToUI(player) {
            // Check if player already exists in UI
            if (document.querySelector(`.player-item[data-id="${player.id}"]`)) {
                return;
            }
            
            const initials = player.name.substring(0, 2).toUpperCase();
            const playerEl = document.createElement('div');
            playerEl.className = 'player-item';
            playerEl.dataset.id = player.id;
            
            playerEl.innerHTML = `
                <div class="player-avatar">${initials}</div>
                <div class="player-name">${player.name}</div>
            `;
            
            playersGrid.appendChild(playerEl);
            updatePlayerCount();
        }
        
        function removePlayerFromUI(playerId) {
            const playerEl = document.querySelector(`.player-item[data-id="${playerId}"]`);
            if (playerEl) {
                playerEl.remove();
            }
            updatePlayerCount();
        }
        
        function updatePlayerCount() {
            playerCount.textContent = playersGrid.children.length;
        }
    });
</script>

<%- include('./partials/footer') %>
